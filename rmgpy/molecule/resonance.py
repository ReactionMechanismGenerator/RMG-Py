#!/usr/bin/env python
# -*- coding: utf-8 -*-

###############################################################################
#                                                                             #
# RMG - Reaction Mechanism Generator                                          #
#                                                                             #
# Copyright (c) 2002-2018 Prof. William H. Green (whgreen@mit.edu),           #
# Prof. Richard H. West (r.west@neu.edu) and the RMG Team (rmg_dev@mit.edu)   #
#                                                                             #
# Permission is hereby granted, free of charge, to any person obtaining a     #
# copy of this software and associated documentation files (the 'Software'),  #
# to deal in the Software without restriction, including without limitation   #
# the rights to use, copy, modify, merge, publish, distribute, sublicense,    #
# and/or sell copies of the Software, and to permit persons to whom the       #
# Software is furnished to do so, subject to the following conditions:        #
#                                                                             #
# The above copyright notice and this permission notice shall be included in  #
# all copies or substantial portions of the Software.                         #
#                                                                             #
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     #
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         #
# DEALINGS IN THE SOFTWARE.                                                   #
#                                                                             #
###############################################################################

"""
This module contains methods for generation of resonance structures of molecules.

The main function to generate all relevant resonance structures for a given
Molecule object is ``generate_resonance_structures``. It calls the necessary
functions for generating each type of resonance structure.

Currently supported resonance types:

- All species:
    - ``generate_allyl_delocalization_resonance_structures``: single radical shift with double or triple bond
    - ``generate_lone_pair_radical_resonance_structures``: single radical shift with lone pair
    - ``generate_lone_pair_multiple_bond_resonance_structures``: multiple bond shift with lone pair
    - ``generate_lone_pair_radical_multiple_bond_resonance_structures``: multiple bond and radical shift with lone pair and radical
    - ``generate_N5ddc_N5tc_resonance_structures``: shift between nitrogen with two double bonds and single + triple bond
    - ``generate_N5dc_resonance_structures``: shift between radical and lone pair mediated by an N5dc atom
- Aromatic species only:
    - ``generate_aromatic_resonance_structures``: fully delocalized structure, where all aromatic rings have benzene bonds
    - ``generate_kekule_structure``: generate a single Kekule structure for an aromatic compound (single/double bond form)
    - ``generate_opposite_kekule_structure``: for monocyclic aromatic species, rotate the double bond assignment
    - ``generate_clar_structures``: generate all structures with the maximum number of pi-sextet assignments
"""

import cython
import logging
import itertools

from .graph import Vertex, Edge, Graph, getVertexConnectivityValue
from .molecule import Atom, Bond, Molecule
from .kekulize import kekulize
import rmgpy.molecule.pathfinder as pathfinder
from rmgpy.exceptions import ILPSolutionError, KekulizationError, AtomTypeError, ResonanceError
import rmgpy.molecule.filtration as filtration
from rmgpy.molecule.adjlist import Saturator


def populate_resonance_algorithms(features=None):
    """
    Generate list of resonance structure algorithms relevant to the current molecule.

    Takes a dictionary of features generated by analyze_molecule().
    Returns a list of resonance algorithms.
    """
    cython.declare(method_list=list)
    method_list = []

    if features is None:
        method_list = [
            generate_allyl_delocalization_resonance_structures,
            generate_lone_pair_radical_resonance_structures,
            generate_lone_pair_multiple_bond_resonance_structures,
            generate_lone_pair_radical_multiple_bond_resonance_structures,
            generate_N5ddc_N5tc_resonance_structures,
            generate_N5dc_resonance_structures,
            generate_aromatic_resonance_structures,
            generate_kekule_structure,
            generate_opposite_kekule_structure,
            generate_clar_structures,
        ]
    else:
        # If the molecule is aromatic, then radical resonance has already been considered
        # If the molecule was falsely identified as aromatic, then isArylRadical will still accurately capture
        # cases where the radical is in an orbital that is orthogonal to the pi orbitals.
        if features['isRadical'] and not features['isAromatic'] and not features['isArylRadical']:
            method_list.append(generate_allyl_delocalization_resonance_structures)
        if features['hasNitrogen']:
            method_list.append(generate_N5ddc_N5tc_resonance_structures)
            method_list.append(generate_N5dc_resonance_structures)
        if features['hasLonePairs']:
            method_list.append(generate_lone_pair_radical_resonance_structures)
            method_list.append(generate_lone_pair_multiple_bond_resonance_structures)
            method_list.append(generate_lone_pair_radical_multiple_bond_resonance_structures)

    return method_list


def analyze_molecule(mol):
    """
    Identify key features of molecule important for resonance structure generation.

    Returns a dictionary of features.
    """
    cython.declare(features=dict)

    features = {'isRadical': mol.isRadical(),
                'isCyclic': mol.isCyclic(),
                'isAromatic': False,
                'isPolycyclicAromatic': False,
                'isArylRadical': False,
                'hasNitrogen': False,
                'hasLonePairs': False,
                }

    if features['isCyclic']:
        aromaticRings = mol.getAromaticRings()[0]
        if len(aromaticRings) > 0:
            features['isAromatic'] = True
        if len(aromaticRings) > 1:
            features['isPolycyclicAromatic'] = True
        if features['isRadical'] and features['isAromatic']:
            features['isArylRadical'] = mol.isArylRadical(aromaticRings)
    for atom in mol.vertices:
        if atom.isNitrogen():
            features['hasNitrogen'] = True
        if atom.lonePairs > 0:
            features['hasLonePairs'] = True

    return features


def generate_resonance_structures(mol, clar_structures=True, keep_isomorphic=False, filter_structures=True):
    """
    Generate and return all of the resonance structures for the input molecule.

    Most of the complexity of this method goes into handling aromatic species, particularly to generate an accurate
    set of resonance structures that is consistent regardless of the input structure. The following considerations
    are made:

    1. False positives from RDKit aromaticity detection can occur if a molecule has exocyclic double bonds
    2. False negatives from RDKit aromaticity detection can occur if a radical is delocalized into an aromatic ring
    3. sp2 hybridized radicals in the plane of an aromatic ring do not participate in hyperconjugation
    4. Non-aromatic resonance structures of PAHs are not important resonance contributors (assumption)

    Aromatic species are broken into the following categories for resonance treatment:

    - Radical polycyclic aromatic species: Kekule structures are generated in order to generate adjacent resonance
      structures. The resulting structures are then used for Clar structure generation. After all three steps, any
      non-aromatic structures are removed, under the assumption that they are not important resonance contributors.
    - Radical monocyclic aromatic species: Kekule structures are generated along with adjacent resonance structures.
      All are kept regardless of aromaticity because the radical is more likely to delocalize into the ring.
    - Stable polycyclic aromatic species: Clar structures are generated
    - Stable monocyclic aromatic species: Kekule structures are generated
    """
    cython.declare(mol_list=list, new_mol_list=list, features=dict, method_list=list)

    logging.debug('Generating resonance structures for {0}...'.format(mol.toSMILES()))

    # Check that mol is a valid structure in terms of atomTypes and net charge. Since SMILES with hypervalance
    # heteroatoms are not always read correctly, print a suggestion to input the structure using an adjList.
    try:
        mol.update()
    except AtomTypeError:
        logging.error("The following molecule has at least one atom with an undefined atomType:\n{0}"
                      "\nIf this structure was entered in SMILES, try using the adjacencyList format for an unambiguous"
                      " definition.".format(mol.toAdjacencyList()))
        raise
    if mol.getNetCharge() != 0:
        raise ValueError("Got the following structure:\nSMILES: {0}\nAdjacencyList:\n{1}\nNet charge: {2}\n\n"
                         "Currently RMG cannot process charged species correctly."
                         "\nIf this structure was entered in SMILES, try using the adjacencyList format for an"
                         " unambiguous definition.".format(mol.toSMILES(),mol.toAdjacencyList(),mol.getNetCharge()))

    if not mol.reactive:
        raise ResonanceError('Can only generate resonance structures for reactive molecules! Got the following unreactive'
                         ' structure:\n{0}Reactive = {1}'.format(mol.toAdjacencyList(),mol.reactive))

    mol_list = [mol]

    # Analyze molecule
    features = analyze_molecule(mol)

    # Use generate_aromatic_resonance_structures to check for false positives and negatives
    if features['isAromatic'] or (features['isCyclic'] and features['isRadical'] and not features['isArylRadical']):
        new_mol_list = generate_aromatic_resonance_structures(mol, features)
        if len(new_mol_list) == 0:
            # Encountered false positive, ie. the molecule is not actually aromatic
            features['isAromatic'] = False
            features['isPolycyclicAromatic'] = False
        else:
            features['isAromatic'] = True
            if len(new_mol_list[0].getAromaticRings()[0]) > 1:
                features['isPolycyclicAromatic'] = True
    else:
        new_mol_list = []

    # Special handling for aromatic species
    if len(new_mol_list) > 0:
        if features['isRadical'] and not features['isArylRadical']:
            if features['isPolycyclicAromatic']:
                if clar_structures:
                    _generate_resonance_structures(new_mol_list, [generate_kekule_structure], keep_isomorphic)
                    _generate_resonance_structures(new_mol_list, [generate_allyl_delocalization_resonance_structures], keep_isomorphic)
                    _generate_resonance_structures(new_mol_list, [generate_clar_structures], keep_isomorphic)
                    # Remove non-aromatic structures under the assumption that they aren't important resonance contributors
                    new_mol_list = [m for m in new_mol_list if m.isAromatic()]
                else:
                    pass
            else:
                _generate_resonance_structures(new_mol_list, [generate_kekule_structure,
                                                            generate_opposite_kekule_structure], keep_isomorphic)
                _generate_resonance_structures(new_mol_list, [generate_allyl_delocalization_resonance_structures], keep_isomorphic)
        elif features['isPolycyclicAromatic']:
            if clar_structures:
                _generate_resonance_structures(new_mol_list, [generate_clar_structures], keep_isomorphic)
            else:
                pass
        else:
            # The molecule is an aryl radical or stable mono-ring aromatic
            # In this case, generate the kekulized form
            _generate_resonance_structures(new_mol_list, [generate_kekule_structure,
                                                        generate_opposite_kekule_structure], keep_isomorphic)

        # Check for isomorphism against the original molecule
        for i, new_mol in enumerate(new_mol_list):
            if not keep_isomorphic and mol.isIsomorphic(new_mol):
                # There will be at most one isomorphic molecule, since the new molecules have
                # already been checked against each other, so we can break after removing it
                del new_mol_list[i]
                break
            elif keep_isomorphic and mol.isIdentical(new_mol):
                del new_mol_list[i]
                break
        # Add the newly generated structures to the original list
        # This is not optimal, but is a temporary measure to ensure compatibility until other issues are fixed
        mol_list.extend(new_mol_list)

    # Generate remaining resonance structures
    method_list = populate_resonance_algorithms(features)
    _generate_resonance_structures(mol_list, method_list, keep_isomorphic)

    if filter_structures:
        return filtration.filter_structures(mol_list)

    return mol_list

def _generate_resonance_structures(mol_list, method_list, keep_isomorphic=False, copy=False):
    """
    Iteratively generate all resonance structures for a list of starting molecules using the specified methods.

    Args:
        mol_list             starting list of molecules
        method_list          list of resonance structure algorithms
        keep_isomorphic      if False, removes any structures that give isIsomorphic=True (default)
                            if True, only remove structures that give isIdentical=True
        copy                if False, append new resonance structures to input list (default)
                            if True, make a new list with all of the resonance structures
    """
    cython.declare(index=cython.int, molecule=Molecule, new_mol_list=list, new_mol=Molecule, mol=Molecule)

    if copy:
        # Make a copy of the list so we don't modify the input list
        mol_list = mol_list[:]

    min_octet_deviation = min(filtration.get_octet_deviation_list(mol_list))
    min_charge_span = min(filtration.get_charge_span_list(mol_list))
    # Iterate over resonance structures
    index = 0
    while index < len(mol_list):
        molecule = mol_list[index]
        new_mol_list = []

        # On-the-fly filtration: Extend methods for molecule only if it is relatively close to the octet rule
        # (don't explore structures that will certainly be filtered out)
        # Sometimes rearranging the structure requires an additional higher charge span structure, so allow structures
        # with a +1 higher charge span compared to the minimum, e.g., [O-]S#S[N+]#N
        octet_deviation = filtration.get_octet_deviation(molecule)
        charge_span = molecule.getChargeSpan()
        if octet_deviation <= min_octet_deviation and charge_span <= min_charge_span + 1:
            # logging.debug('Extending resonance structures for {0}...'.format(molecule.toSMILES()))
            for method in method_list:
                new_mol_list.extend(method(molecule))
            if octet_deviation < min_octet_deviation:
                # update min_octet_deviation to make this criterion tighter
                min_octet_deviation = octet_deviation
            if charge_span < min_charge_span:
                # update min_charge_span to make this criterion tighter
                min_charge_span = charge_span

        for new_mol in new_mol_list:
            # Append to structure list if unique
            for mol in mol_list:
                if not keep_isomorphic and mol.isIsomorphic(new_mol):
                    break
                elif keep_isomorphic and mol.isIdentical(new_mol):
                    break
            else:
                mol_list.append(new_mol)

        # Move to the next resonance structure
        index += 1

    return mol_list


def generate_allyl_delocalization_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by one allyl radical shift.

    Biradicals on a single atom are not supported.
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom, atom3=Atom, bond12=Bond, bond23=Bond)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    if mol.isRadical():  # Iterate over radicals in structure
        for atom in mol.vertices:
            paths = pathfinder.find_allyl_delocalization_paths(atom)
            for atom1, atom2, atom3, bond12, bond23 in paths:
                # Adjust to (potentially) new resonance structure
                atom1.decrementRadical()
                atom3.incrementRadical()
                bond12.incrementOrder()
                bond23.decrementOrder()
                # Make a copy of isomer
                structure = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance structures
                for index in xrange(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = structure.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current structure
                atom1.incrementRadical()
                atom3.decrementRadical()
                bond12.decrementOrder()
                bond23.incrementOrder()
                try:
                    structure.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    structures.append(structure)
    return structures


def generate_lone_pair_radical_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by lone electron pair - radical shifts.
    These resonance transformations do not involve changing bond orders.
    NO2 example: O=[:N]-[::O.] <=> O=[N.+]-[:::O-]
    (where ':' denotes a lone pair, '.' denotes a radical, '-' not in [] denotes a single bond, '-'/'+' denote charge)
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    if mol.isRadical():  # Iterate over radicals in structure
        for atom in mol.vertices:
            paths = pathfinder.find_lone_pair_radical_delocalization_paths(atom)
            for atom1, atom2 in paths:
                # Adjust to (potentially) new resonance structure
                atom1.decrementRadical()
                atom1.incrementLonePairs()
                atom1.updateCharge()
                atom2.incrementRadical()
                atom2.decrementLonePairs()
                atom2.updateCharge()
                # Make a copy of structure
                structure = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance structures
                for index in xrange(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = structure.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current structure
                atom1.incrementRadical()
                atom1.decrementLonePairs()
                atom1.updateCharge()
                atom2.decrementRadical()
                atom2.incrementLonePairs()
                atom2.updateCharge()
                try:
                    structure.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    structures.append(structure)
    return structures


def generate_lone_pair_multiple_bond_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by lone electron pair - multiple bond shifts.
    Example: [:NH]=[CH2] <=> [::NH-]-[CH2+]
    (where ':' denotes a lone pair, '.' denotes a radical, '-' not in [] denotes a single bond, '-'/'+' denote charge)
    Here atom1 refers to the N/S/O atom, atom 2 refers to the any R!H (atom2's lonePairs aren't affected)
    (In direction 1 atom1 <losses> a lone pair, in direction 2 atom1 <gains> a lone pair)
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule, direction=cython.int)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom, bond12=Bond)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    for atom in mol.vertices:
        paths = pathfinder.find_lone_pair_multiple_bond_delocalization_paths(atom)
        for atom1, atom2, bond12, direction in paths:
            if direction == 1:  # The direction <increasing> the bond order
                atom1.decrementLonePairs()
                bond12.incrementOrder()
            elif direction == 2:  # The direction <decreasing> the bond order
                atom1.incrementLonePairs()
                bond12.decrementOrder()
            atom1.updateCharge()
            atom2.updateCharge()
            # Make a copy of structure
            structure = mol.copy(deep=True)
            # Also copy the connectivity values, since they are the same
            # for all resonance structures
            for index in xrange(len(mol.vertices)):
                v1 = mol.vertices[index]
                v2 = structure.vertices[index]
                v2.connectivity1 = v1.connectivity1
                v2.connectivity2 = v1.connectivity2
                v2.connectivity3 = v1.connectivity3
                v2.sortingLabel = v1.sortingLabel
            # Restore current structure
            if direction == 1:  # The direction <increasing> the bond order
                atom1.incrementLonePairs()
                bond12.decrementOrder()
            elif direction == 2:  # The direction <decreasing> the bond order
                atom1.decrementLonePairs()
                bond12.incrementOrder()
            atom1.updateCharge()
            atom2.updateCharge()
            try:
                structure.updateAtomTypes(logSpecies=False)
            except AtomTypeError:
                pass  # Don't append resonance structure if it creates an undefined atomType
            else:
                structures.append(structure)
    return structures


def generate_lone_pair_radical_multiple_bond_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by lone electron pair - radical - multiple bond shifts.
    Example: [:N.]=[CH2] <=> [::N]-[.CH2]
    (where ':' denotes a lone pair, '.' denotes a radical, '-' not in [] denotes a single bond, '-'/'+' denote charge)
    Here atom1 refers to the N/S/O atom, atom 2 refers to the any R!H (atom2's lonePairs aren't affected)
    This function is similar to generate_lone_pair_multiple_bond_resonance_structures() except for dealing with the
    radical transformations.
    (In direction 1 atom1 <losses> a lone pair, gains a radical, and atom2 looses a radical.
    In direction 2 atom1 <gains> a lone pair, looses a radical, and atom2 gains a radical)
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule, direction=cython.int)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom, bond12=Bond)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    if mol.isRadical():  # Iterate over radicals in structure
        for atom in mol.vertices:
            paths = pathfinder.find_lone_pair_radical_multiple_bond_delocalization_paths(atom)
            for atom1, atom2, bond12, direction in paths:
                if direction == 1:  # The direction <increasing> the bond order
                    atom1.decrementLonePairs()
                    bond12.incrementOrder()
                    atom1.incrementRadical()
                    atom2.decrementRadical()
                elif direction == 2:  # The direction <decreasing> the bond order
                    atom1.incrementLonePairs()
                    bond12.decrementOrder()
                    atom1.decrementRadical()
                    atom2.incrementRadical()
                atom1.updateCharge()
                atom2.updateCharge()
                # Make a copy of structure
                structure = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance structures
                for index in xrange(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = structure.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current structure
                if direction == 1:  # The direction <increasing> the bond order
                    atom1.incrementLonePairs()
                    bond12.decrementOrder()
                    atom1.decrementRadical()
                    atom2.incrementRadical()
                elif direction == 2:  # The direction <decreasing> the bond order
                    atom1.decrementLonePairs()
                    bond12.incrementOrder()
                    atom1.incrementRadical()
                    atom2.decrementRadical()
                atom1.updateCharge()
                atom2.updateCharge()
                try:
                    structure.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    structures.append(structure)
    return structures


def generate_N5ddc_N5tc_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by shifts between N5ddc and N5tc.
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom, atom3=Atom, bond12=Bond, bond23=Bond)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    for atom in mol.vertices:
        if atom.atomType.label in ['N5ddc','N5tc'] and atom.radicalElectrons == 0:
            paths = pathfinder.find_N5ddc_N5tc_delocalization_paths(atom)
            for atom1, atom2, atom3, bond12, bond23 in paths:
                atom2.decrementLonePairs()
                atom3.incrementLonePairs()
                bond12.incrementOrder()
                bond23.decrementOrder()
                atom1.updateCharge()
                atom2.updateCharge()
                atom3.updateCharge()
                # Make a copy of structure
                structure = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance structures
                for index in xrange(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = structure.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current structure
                atom2.incrementLonePairs()
                atom3.decrementLonePairs()
                bond12.decrementOrder()
                bond23.incrementOrder()
                atom1.updateCharge()
                atom2.updateCharge()
                atom3.updateCharge()
                try:
                    structure.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    structures.append(structure)
    return structures


def generate_N5dc_resonance_structures(mol):
    """
    Generate all of the resonance structures formed by radical and lone pair shifts mediated by an N5dc atom.
    """
    cython.declare(structures=list, paths=list, index=cython.int, structure=Molecule)
    cython.declare(atom=Atom, atom2=Atom, atom3=Atom)
    cython.declare(v1=Vertex, v2=Vertex)

    structures = []
    for atom in mol.vertices:
        if atom.atomType.label == 'N5dc' and atom.radicalElectrons == 0:
            paths = pathfinder.find_N5dc_delocalization_paths(atom)
            for atom2, atom3 in paths:
                atom2.decrementRadical()
                atom2.incrementLonePairs()
                atom3.decrementLonePairs()
                atom3.incrementRadical()
                atom2.updateCharge()
                atom3.updateCharge()
                # Make a copy of structure
                structure = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance structures
                for index in xrange(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = structure.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current structure
                atom2.incrementRadical()
                atom2.decrementLonePairs()
                atom3.incrementLonePairs()
                atom3.decrementRadical()
                atom2.updateCharge()
                atom3.updateCharge()
                try:
                    structure.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    structures.append(structure)
    return structures


def generate_aromatic_resonance_structures(mol, features=None):
    """
    Generate the aromatic form of the molecule. For radicals, generates the form with the most aromatic rings.

    Returns result as a list.
    In most cases, only one structure will be returned.
    In certain cases where multiple forms have the same number of aromatic rings, multiple structures will be returned.
    If there's an error (eg. in RDKit) it just returns an empty list.
    """
    cython.declare(molecule=Molecule, rings=list, aromaticBonds=list, kekuleList=list, maxNum=cython.int, mol_list=list,
                   new_mol_list=list, ring=list, bond=Bond, order=float, originalBonds=list, originalOrder=list,
                   i=cython.int, counter=cython.int)

    if features is None:
        features = analyze_molecule(mol)

    if not features['isCyclic']:
        return []

    molecule = mol.copy(deep=True)

    # First get all rings in the molecule
    rings = molecule.getAllSimpleCyclesOfSize(6)

    # Then determine which ones are aromatic
    aromaticBonds = molecule.getAromaticRings(rings)[1]

    # If the species is a radical, then there is a chance that the radical can be shifted
    #   to a location that increases the number of perceived aromatic rings.
    if features['isRadical'] and not features['isArylRadical']:
        if molecule.isAromatic():
            kekuleList = generate_kekule_structure(molecule)
        else:
            kekuleList = [molecule]
        _generate_resonance_structures(kekuleList, [generate_allyl_delocalization_resonance_structures])

        maxNum = 0
        mol_list = []

        # Iterate through the adjacent resonance structures and keep the structures with the most aromatic rings
        for mol0 in kekuleList:
            aromaticBonds = mol0.getAromaticRings()[1]
            if len(aromaticBonds) > maxNum:
                maxNum = len(aromaticBonds)
                mol_list = [(mol0, aromaticBonds)]
            elif len(aromaticBonds) == maxNum:
                mol_list.append((mol0, aromaticBonds))
    else:
        # Otherwise, it is not possible to increase the number of aromatic rings by moving electrons,
        # so go ahead with the inputted form of the molecule
        mol_list = [(molecule, aromaticBonds)]

    new_mol_list = []

    # Generate the aromatic resonance structure(s)
    for mol0, aromaticBonds in mol_list:
        if not aromaticBonds:
            continue
        # Save original bond orders in case this doesn't work out
        originalBonds = []
        for ring in aromaticBonds:
            originalOrder = []
            for bond in ring:
                originalOrder.append(bond.order)
            originalBonds.append(originalOrder)
        # Change bond types to benzene bonds for all aromatic rings
        for ring in aromaticBonds:
            for bond in ring:
                bond.order = 1.5

        try:
            mol0.updateAtomTypes(logSpecies=False)
        except AtomTypeError:
            # If this didn't work the first time, then there might be a ring that is not actually aromatic
            # Reset our changes
            for ring, originalOrder in itertools.izip(aromaticBonds, originalBonds):
                for bond, order in itertools.izip(ring, originalOrder):
                    bond.order = order
            # Try to make each ring aromatic, one by one
            i = 0
            counter = 0
            while i < len(aromaticBonds) and counter < 2*len(aromaticBonds):
                counter += 1
                originalOrder = []
                for bond in aromaticBonds[i]:
                    originalOrder.append(bond.order)
                    bond.order = 1.5
                try:
                    mol0.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    # This ring could not be made aromatic, possibly because it depends on other rings
                    # Undo changes
                    for bond, order in itertools.izip(aromaticBonds[i], originalOrder):
                        bond.order = order
                    # Move it to the end of the list, and go on to the next ring
                    aromaticBonds.append(aromaticBonds.pop(i))
                    mol0.updateAtomTypes(logSpecies=False)
                    continue
                else:
                    # We're done with this ring, so go on to the next ring
                    i += 1
            # If we didn't end up making any of the rings aromatic, then this molecule is not actually aromatic
            if i == 0:
                # Move onto next molecule in the list
                continue

        for mol1 in new_mol_list:
            if mol1.isIsomorphic(mol0):
                break
        else:
            new_mol_list.append(mol0)

    return new_mol_list

def generate_kekule_structure(mol):
    """
    Generate a kekulized (single-double bond) form of the molecule.
    The specific arrangement of double bonds is non-deterministic, and depends on RDKit.

    Returns a single Kekule structure as an element of a list of length 1.
    If there's an error (eg. in RDKit) then it just returns an empty list.
    """
    cython.declare(atom=Atom, molecule=Molecule)

    for atom in mol.atoms:
        if atom.atomType.label == 'Cb' or atom.atomType.label == 'Cbf':
            break
    else:
        return []

    molecule = mol.copy(deep=True)

    try:
        kekulize(molecule)
    except KekulizationError:
        return []

    return [molecule]

def generate_opposite_kekule_structure(mol):
    """
    Generate the Kekule structure with opposite single/double bond arrangement
    for single ring aromatics.

    Returns a single Kekule structure as an element of a list of length 1.
    """

    # This won't work with the aromatic form of the molecule
    if mol.isAromatic():
        return []

    molecule = mol.copy(deep=True)

    aromaticBonds = molecule.getAromaticRings()[1]

    # We can only do this for single ring aromatics for now
    if len(aromaticBonds) != 1:
        return []

    numS = 0
    numD = 0
    for bond in aromaticBonds[0]:
        if bond.isSingle():
            numS += 1
            bond.order = 2
        elif bond.isDouble():
            numD += 1
            bond.order = 1
        else:
            # Something is wrong: there is a bond that is not single or double
            return []

    if numS != 3 or numD != 3:
        return []

    try:
        molecule.updateAtomTypes()
    except AtomTypeError:
        return []
    else:
        return [molecule]

def generate_isomorphic_resonance_structures(mol, saturate_h=False):
    """
    Select the resonance isomer that is isomorphic to the parameter isomer, with the lowest unpaired
    electrons descriptor.

    We generate over all resonance isomers (non-isomorphic as well as isomorphic) and retain isomorphic
    isomers.

    If `saturate_h` is `True`, then saturate `mol` with hydrogens before generating the resonance structures,
    and remove the hydrogens before returning `isomorphic_isomers`. This is useful when resonance structures are
    generated for molecules in which all hydrogens were intentionally removed as in generating augInChI. Otherwise,
    RMG will probably get many of the lonePairs and partial charges in a molecule wrong.

    WIP: do not generate aromatic resonance isomers.
    """

    cython.declare(isomorphic_isomers=list, isomers=list, index=int, max_val_e=int, order=float, num_h_to_add=int,
                   isomer=Molecule, newIsomer=Molecule, isom=Molecule, atom=Atom, a=Atom, b=Bond, newAtoms=list)

    if saturate_h:  # Add explicit hydrogen atoms to complete structure if desired
        Saturator.saturate(mol.vertices)

    isomorphic_isomers = [mol]  # resonance isomers that are isomorphic to the parameter isomer.

    isomers = [mol]

    # Iterate over resonance isomers
    index = 0
    while index < len(isomers):
        isomer = isomers[index]
        
        newIsomers = []
        for algo in populate_resonance_algorithms():
            newIsomers.extend(algo(isomer))
        
        for newIsomer in newIsomers:
            # Append to isomer list if unique
            for isom in isomers:
                if isom.copy(deep=True).isIsomorphic(newIsomer.copy(deep=True)):
                    isomorphic_isomers.append(newIsomer)
                    break
            else:
                isomers.append(newIsomer)

        # Move to next resonance isomer
        index += 1

    if saturate_h:  # remove hydrogens before returning isomorphic_isomers
        for isomer in isomorphic_isomers:
            isomer.deleteHydrogens()

    return isomorphic_isomers


def generate_clar_structures(mol):
    """
    Generate Clar structures for a given molecule.

    Returns a list of :class:`Molecule` objects corresponding to the Clar structures.
    """
    cython.declare(output=list, mol_list=list, new_mol=Molecule, aromaticRings=list, bonds=list, solution=list,
                   y=list, x=list, index=cython.int, bond=Bond, ring=list)

    if not mol.isCyclic():
        return []

    # Atom IDs are necessary in order to maintain consistent matrices between iterations
    if not mol.atomIDValid():
        mol.assignAtomIDs()

    try:
        output = _clar_optimization(mol)
    except ILPSolutionError:
        # The optimization algorithm did not work on the first iteration
        return []

    mol_list = []

    for new_mol, aromaticRings, bonds, solution in output:

        # The solution includes a part corresponding to rings, y, and a part corresponding to bonds, x, using
        # nomenclature from the paper. In y, 1 means the ring as a sextet, 0 means it does not.
        # In x, 1 corresponds to a double bond, 0 either means a single bond or the bond is part of a sextet.
        y = solution[0:len(aromaticRings)]
        x = solution[len(aromaticRings):]

        # Apply results to molecule - double bond locations first
        for index, bond in enumerate(bonds):
            if x[index] == 0:
                bond.order = 1 # single
            elif x[index] == 1:
                bond.order = 2 # double
            else:
                raise ValueError('Unaccepted bond value {0} obtained from optimization.'.format(x[index]))

        # Then apply locations of aromatic sextets by converting to benzene bonds
        for index, ring in enumerate(aromaticRings):
            if y[index] == 1:
                _clar_transformation(new_mol, ring)

        try:
            new_mol.updateAtomTypes()
        except AtomTypeError:
            pass
        else:
            mol_list.append(new_mol)

    return mol_list


def _clar_optimization(mol, constraints=None, maxNum=None):
    """
    Implements linear programming algorithm for finding Clar structures. This algorithm maximizes the number
    of Clar sextets within the constraints of molecular geometry and atom valency.

    Returns a list of valid Clar solutions in the form of a tuple, with the following entries:
        [0] Molecule object
        [1] List of aromatic rings
        [2] List of bonds
        [3] Optimization solution

    The optimization solution is a list of boolean values with sextet assignments followed by double bond assignments,
    with indices corresponding to the list of aromatic rings and list of bonds, respectively.

    Method adapted from:
        Hansen, P.; Zheng, M. The Clar Number of a Benzenoid Hydrocarbon and Linear Programming.
            J. Math. Chem. 1994, 15 (1), 93–107.
    """
    cython.declare(molecule=Molecule, aromaticRings=list, exo=list, l=cython.int, m=cython.int, n=cython.int,
                   a=list, objective=list, status=cython.int, solution=list, innerSolutions=list)

    from lpsolve55 import lpsolve
    import signal

    # Save the current signal handler
    sig = signal.getsignal(signal.SIGINT)

    # Make a copy of the molecule so we don't destroy the original
    molecule = mol.copy(deep=True)

    aromaticRings = molecule.getAromaticRings()[0]
    aromaticRings.sort(key=lambda x: sum([atom.id for atom in x]))

    if not aromaticRings:
        return []

    # Get list of atoms that are in rings
    atoms = set()
    for ring in aromaticRings:
        atoms.update(ring)
    atoms = sorted(atoms, key=lambda x: x.id)

    # Get list of bonds involving the ring atoms, ignoring bonds to hydrogen
    bonds = set()
    for atom in atoms:
        bonds.update([atom.bonds[key] for key in atom.bonds.keys() if key.isNonHydrogen()])
    bonds = sorted(bonds, key=lambda x: (x.atom1.id, x.atom2.id))

    # Identify exocyclic bonds, and save their bond orders
    exo = []
    for bond in bonds:
        if bond.atom1 not in atoms or bond.atom2 not in atoms:
            if bond.isDouble():
                exo.append(1)
            else:
                exo.append(0)
        else:
            exo.append(None)

    # Dimensions
    l = len(aromaticRings)
    m = len(atoms)
    n = l + len(bonds)

    # Connectivity matrix which indicates which rings and bonds each atom is in
    # Part of equality constraint Ax=b
    a = []
    for atom in atoms:
        inRing = [1 if atom in ring else 0 for ring in aromaticRings]
        inBond = [1 if atom in [bond.atom1, bond.atom2] else 0 for bond in bonds]
        a.append(inRing + inBond)

    # Objective vector for optimization: sextets have a weight of 1, double bonds have a weight of 0
    objective = [1] * l + [0] * len(bonds)

    # Solve LP problem using lpsolve
    lp = lpsolve('make_lp', m, n)               # initialize lp with constraint matrix with m rows and n columns
    lpsolve('set_verbose', lp, 2)               # reduce messages from lpsolve
    lpsolve('set_obj_fn', lp, objective)        # set objective function
    lpsolve('set_maxim', lp)                    # set solver to maximize objective
    lpsolve('set_mat', lp, a)                   # set left hand side to constraint matrix
    lpsolve('set_rh_vec', lp, [1] * m)          # set right hand side to 1 for all constraints
    lpsolve('set_constr_type', lp, ['='] * m)   # set all constraints as equality constraints
    lpsolve('set_binary', lp, [True] * n)       # set all variables to be binary

    # Constrain values of exocyclic bonds, since we don't want to modify them
    for i in range(l, n):
        if exo[i - l] is not None:
            # NOTE: lpsolve indexes from 1, so the variable we're changing should be i + 1
            lpsolve('set_bounds', lp, i + 1, exo[i - l], exo[i - l])

    # Add constraints to problem if provided
    if constraints is not None:
        for constraint in constraints:
            try:
                lpsolve('add_constraint', lp, constraint[0], '<=', constraint[1])
            except Exception as e:
                logging.debug('Unable to add constraint: {0} <= {1}'.format(constraint[0], constraint[1]))
                logging.debug(mol.toAdjacencyList())
                if str(e) == 'invalid vector.':
                    raise ILPSolutionError('Unable to add constraint, likely due to '
                                           'inconsistent aromatic ring perception.')
                else:
                    raise e

    status = lpsolve('solve', lp)
    objVal, solution = lpsolve('get_solution', lp)[0:2]
    lpsolve('delete_lp', lp)  # Delete the LP problem to clear up memory

    # Reset signal handling since lpsolve changed it
    try:
        signal.signal(signal.SIGINT, sig)
    except ValueError:
        # This is not being run in the main thread, so we cannot reset signal
        pass

    # Check that optimization was successful
    if status != 0:
        raise ILPSolutionError('Optimization could not find a valid solution.')

    # Check that we the result contains at least one aromatic sextet
    if objVal == 0:
        return []

    # Check that the solution contains the maximum number of sextets possible
    if maxNum is None:
        maxNum = objVal  # This is the first solution, so the result should be an upper limit
    elif objVal < maxNum:
        raise ILPSolutionError('Optimization obtained a sub-optimal solution.')

    if any([x != 1 and x != 0 for x in solution]):
        raise ILPSolutionError('Optimization obtained a non-integer solution.')

    # Generate constraints based on the solution obtained
    y = solution[0:l]
    new_a = y + [0] * len(bonds)
    new_b = sum(y) - 1
    if constraints is not None:
        constraints.append((new_a, new_b))
    else:
        constraints = [(new_a, new_b)]

    # Run optimization with additional constraints
    try:
        innerSolutions = _clar_optimization(mol, constraints=constraints, maxNum=maxNum)
    except ILPSolutionError:
        innerSolutions = []

    return innerSolutions + [(molecule, aromaticRings, bonds, solution)]


def _clar_transformation(mol, aromaticRing):
    """
    Performs Clar transformation for given ring in a molecule, ie. conversion to aromatic sextet.

    Args:
        mol             a :class:`Molecule` object
        aromaticRing    a list of :class:`Atom` objects corresponding to an aromatic ring in mol

    This function directly modifies the input molecule and does not return anything.
    """
    cython.declare(bondList=list, i=cython.int, atom1=Atom, atom2=Atom, bond=Bond)

    bondList = []

    for i, atom1 in enumerate(aromaticRing):
        for atom2 in aromaticRing[i + 1:]:
            if mol.hasBond(atom1, atom2):
                bondList.append(mol.getBond(atom1, atom2))

    for bond in bondList:
        bond.order = 1.5
